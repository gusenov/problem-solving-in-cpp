// Подключение заголовочных файлов
// из стандартной библиотеки:
#include <iostream>  // ввод/вывод.
#include <windows.h>  // нужно для функций SetConsoleOutputCP и SetConsoleCP.

// Переход на кириллицу:
void cyrillic() {
	// Эти строки нужны для правильного отображения кириллицы:
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	
	// Также надо изменить шрифт в консоли на Lucida Console.
	// Для замены шрифта кликаете правой кнопкой на надписи «Командная строка» окна консоли. 
	// В открывшемся меню выбираете «Свойства». 
	// В появившемся окне выбираете вкладку «Шрифт» и там выбираете «Lucida Console». 
}

// Использование пространства имён
// стандартной библиотеки:
using namespace std;

// Объявление структуры элемента списка
// и указателей на требуемые элементы:
struct el {
	int ELEM;
	struct el* posl;
} EL, *pTEK, *pPRED, *temp, *pSTART, *pEND;

// Процедура для вывода на экран списка:
void print() {
	cout << "\n--------------------------";
	pTEK = pSTART;
	cout << "\nАдрес нач. элемента: " << pSTART;
	do {
		cout << "\nАдрес элемента = " << pTEK << ". Элемент = " << pTEK->ELEM << ".  Адрес след. элемента = " << pTEK->posl;
		pTEK = pTEK->posl;
	} while (pTEK != pSTART);
	cout << "\nАдрес конеч. элемента: " << pEND;
}

// Главная функция (точка входа в программу):
int main() {
	cyrillic();  // вкл. кириллицу.
	
	int z;
	int flag = 0;
	
	// Бесконечный цикл для ввода элементов списка,
	// так как количество элементов неизвестно:
	for (;;) {
		cout << "\nВвести элемент? ";
		cin >> z;
		
		if (z < 1) break;
		
		// Выделенная память заносится в указатель на текущий элемент:
		pTEK = (struct el*)(malloc(sizeof(EL))); 

		// При создании первого элемента сохраняются соответствующие адреса:
		if (flag == 0) {
			pSTART = pTEK;
			pPRED = pTEK;
			pEND = pTEK;
			flag = 1;
		}

		cout << "\nЭлемент -> ";
		
		// Первоначальное определение полей элемента списка:
		cin >> pTEK->ELEM; 
		pTEK->posl = pSTART;

		// Изменение указателей на конец списка и предыдущий элемент:
		pPRED->posl = pTEK;
		pEND = pPRED = pTEK;
	}
	
	// Вывод на экран списка:
	print();
	
	cout << "\n\nПоиск искомого числа в списке и добавление после него нового числа:";
	
	int ch;
	cout << "\nВведите число для проверки -> ";
	cin >> ch;
	
	pTEK = pSTART;
	
	for (;;) {
		// В temp хранится адрес последующего элемента списка,
		// что требуется для выхода из цикла:
		temp = pTEK->posl;

		if (pTEK->ELEM != ch) {
			if (temp == pSTART) break;
			pTEK = pTEK->posl;
			continue;
		}
		
		// Выделенная память заносится в указатель на следующий элемент:
		pTEK->posl = (struct el*)(malloc(sizeof(EL))); 
		
		cout << "\nНовый элемент -> ";
		
		// Первоначальное определение полей нового элемента списка:
		cin >> pTEK->posl->ELEM; 
		pTEK->posl->posl = temp;
		
		if (pEND == pTEK) {
			pEND = pTEK->posl;
		}
		
		pTEK = pTEK->posl;
	}
	
	// Вывод на экран списка:
	print();
	
	// Пауза перед выходом из программы 
	// (программа ждёт ввода любого символа): 
	cin.get();
	cin.get();

	// Возврат нуля, 
	// что означает успешное завершение программы: 
	return 0;
}
