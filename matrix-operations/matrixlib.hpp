#ifndef MATRIX_LIB_HPP
#define MATRIX_LIB_HPP

// Описывает прямоугольные матрицы чисел с плавающей точкой двойной точности (тип double).
class Matrix {

private:
	
	// Размеры матрицы по вертикали и по горизонтали:
	unsigned ysize;  // число строк.
	unsigned xsize;  // число столбцов.
	
	double *Array;  // указатель на начало массива в динамической памяти.

	// Объекты класса Matrix могут интенсивно использоваться в качестве операндов в различных вычислениях:
	//     Matrix A, B, С;  // создаются три объекта класса Matrix.
	//     // далее над ними выполняются некие действия.
	//     C = A + B;  // объекту C присваивается значение суммы объектов А и B.
	// Сначала вызывается функция operator+, а затем функция operator=.
	// Обе функции являются компонентами класса, следовательно, они имеют по одному параметру.
	// Функция operator+ вызывается для объекта A, в качестве параметра ей передается объект B. 
	
	// Чтобы исключить копирование данных и вызов конструктора для локальной копии объекта, этот параметр передается по ссылке.
	
	// Объект-результат создается функцией operator+ в динамической памяти, а возвращается ссылка на этот объект.
	// Вызывающая сторона обязана позаботиться о том, чтобы не потерять ссылку на безымянный динамический объект.
	
	// Функция operator=  должна, очевидно, уничтожить объект-параметр после того, как он будет ею использован.
	// Но такое поведение функции не универсально, так как не всегда требуется уничтожение объекта-параметра. 
	// Например, если мы присваиваем объекту C значение объекта А (С = A),  последний, естественно, не должен (и не может!)  быть уничтожен. 
	// Уничтожаться должны только "временные" динамические объекты, созданные методами класса.
	
	// Средство, позволяющее перегруженному оператору присваивания и другим методам класса определять "вид" объекта-параметра:
	int temporary;  // флаг "временности".
	// Если temporary != 0, объект считается "временным" и должен быть уничтожен после использования.
	
public:

	// Для работы с динамическими данными класс содержит полный набор обязательных методов:
	Matrix(unsigned y=1, unsigned x=1, double v=0);  // конструктор, заполняет матрицу значением v.
	Matrix(Matrix & M);  // конструктор копирования.
	// перегруженный оператор присваивания.
	~Matrix();  // деструктор.
	
	
	void show(void);  // "примитивный" вывод.
	
	double & operator()(unsigned n) const;  // последовательный доступ к элементу.
		
	// Размеры матрицы:
	unsigned getxsize(void);
	unsigned getysize(void);
	
	Matrix & operator % (Matrix &) const;  // функция перегрузки операции "%" для вычисления объединения матриц по вертикали.
};

#endif

