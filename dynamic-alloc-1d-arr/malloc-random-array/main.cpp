#include <iostream>
#include <cstdlib>
#include <ctime>
#include <windows.h>

// Переход на кириллицу:
void cyrillic() {
	// Эти строки нужны для правильного отображения кириллицы:
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	
	// Также надо изменить шрифт в консоли на Lucida Console.
	// Для замены шрифта кликаете правой кнопкой на надписи «Командная строка» окна консоли. 
	// В открывшемся меню выбираете «Свойства». 
	// В появившемся окне выбираете вкладку «Шрифт» и там выбираете «Lucida Console». 
}

int main(int argc, char** argv) {
	int i, j, u;  // счетчики.
	
	int n;  // размер исходного массива.
	int *b;  // указатель на исходный одномерный массив.
	
	int m = 0;  // количество положительных чисел.
	int *c;  // динамический массив c[m], содержащий положительные числа массива b.
	
	int k = 0;  // количество отрицательных чисел.
	int *d;  // динамический массив d[k], содержащий отрицательные числа массива b.
	
	cyrillic();
	
	std::cout << "Введите с клавиатуры размер массива: ";
	std::cin >> n;
	
	// Выделение памяти под одномерный динамический массив b[n]:
	b = (int *)malloc(n * sizeof(int));
	if (b == NULL) {  // если не удалось выделить память:
		std::cout << "Не удалось выделить память" << std::endl;
		return 1;  // выход по ошибке, код ошибки 1.
	}

	std::cout << "Исходный массив: " << std::endl;
	srand(time(0));  // автоматическая рандомизация генератора случайных чисел (чтобы всегда получать разные случайные числа).
	for (i = 0; i < n; i++) {
		b[i] = (rand() % 51);  // генерация случайного целого числа в диапазоне [0; 50].
		
		// Генерация знака для числа:
		if (rand() % 2 == 0) {  // генерируем случайное целое число в диапазоне [0; 1] и если выпало 0, то меняем знак на минус:
			b[i] = -b[i];
		}
		
		std::cout << b[i] << " ";  // вывод исходного массива.
		
		if (b[i] >= 0) {
			m++;  // увеличение количества положительных чисел.
		} else {
			k++;  // увеличение количества отрицательных чисел.
		}
	}
	std::cout << std::endl;
	
	// Выделение памяти под динамический массив c[m], содержащий положительные числа массива b:
	c = (int *)malloc(m * sizeof(int));
	if (c == NULL) {  // если не удалось выделить память:
		std::cout << "Не удалось выделить память" << std::endl;
		return 1;  // выход по ошибке, код ошибки 1.
	}
	
	// Выделение памяти под динамический массив d[k], содержащий отрицательные числа массива b:
	d = (int *)malloc(k * sizeof(int));
	if (d == NULL) {  // если не удалось выделить память:
		std::cout << "Не удалось выделить память" << std::endl;
		return 1;  // выход по ошибке, код ошибки 1.
	}
		
	// Получение массивов содержащих положительные и отрицательные числа:
	j = u = 0;
	for (i = 0; i < n; i++) {
		if (b[i] >= 0) {
			c[j++] = b[i];  // добавление элемента в массив положительных чисел.
		} else {
			d[u++] = b[i];  // добавление элемента в массив отрицательных чисел.
		}
	}
	
	free(b);  // освобождение памяти.
	b = NULL;
	
	// Вывод массива положительных чисел:
	std::cout << "Массив содержащий положительные числа исходного массива: " << std::endl;
	for (i = 0; i < m; i++) {
		std::cout << c[i] << " ";
	}
	std::cout << std::endl;
	
	free(c);  // освобождение памяти.
	c = NULL;
	
	// Вывод массива отрицательных чисел:
	std::cout << "Массив содержащий отрицательные числа исходного массива: " << std::endl;	
	for (i = 0; i < k; i++) {
		std::cout << d[i] << " ";
	}
	std::cout << std::endl;
	
	free(d);  // освобождение памяти.
	d = NULL;
	
	system("pause");
	
	return 0;
}

